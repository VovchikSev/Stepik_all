import random

"""
 random       Возвращает случайное вещественное число в промежутке от 0 до 1.
 uniform      Возвращает случайное вещественное число в указанном промежутке.
 randint      Возвращает случайное целое число в пределах заданного промежутка.
 randrange    Возвращает случайное целое число в пределах заданного промежутка (можно указать шаг).
 gauss        Возвращает случайное вещественное число, основываясь на Гауссовом распределении.
 choice       Возвращает случайный элемент из заданной последовательности.
 shuffle      Перемешивает элементы случайным образом (работает только с изменяемыми объектами).
 sample       Возвращает новый список со случайным выбором неповторяющихся элементов (2-м аргументом нужно указать длину нового списка).
 seed         При запуске программы результат изменяться не будет (нужно указать начальное числовое значение).
"""

"""
Подвиг 2. Вводятся два натуральных числа a, b (a < b) в одну строчку через пробел. Выполните генерацию вещественной
случайной величины в диапазоне [a; b). Округлите результат до сотых и выведите его на экран.
Sample Input: -4 5
Sample Output: -2.79
"""
import numpy as np
random.seed(1)
N = int(input())
P = [[0] * N for i in range(N)]
# P = [[0] * (N + 2) for _ in range(N + 2)]
def is_isolate(i, j):
    return sum([P[i - 1][j - 1], P[i - 1][j], P[i - 1][j + 1],
                P[i][j - 1], P[i][j + 1], P[i + 1][j - 1],
                P[i + 1][j], P[i + 1][j + 1]]) == 0


# строим границу из нулей вокруг матрицы P
P = np.pad(P, pad_width=1, mode='constant', constant_values=0)

# Заполняем поле 10-ю минами
for _ in range(10):
    while True:
        # генерируем координаты ячейки пока не найдём свободную от 1 и с 0 вокруг
        row = random.randint(1, N - 3)  # при N - 2 время не хватит для решения
        column = random.randint(1, N - 2)
        # если ячейка свободная, то занимаем её
        if is_isolate(row, column) and P[row][column] != 1:
            P[row][column] = 1
            break