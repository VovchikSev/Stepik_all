

# Подвиг 3. Вводятся вещественные числа в одну строчку через пробел. Необходимо на их основе сформировать
# множество s.
# -5.1 -3.0 7.6 10.3 -4.6 2.78

# s = set(map(float, input().split()))
# print(*sorted(s))


# Подвиг 4. Вводится текст в одну строку, слова разделены пробелом.
# Необходимо подсчитать число уникальных слов (без учета регистра) в этом тексте.
# Результат (число уникальных слов) вывести на экран.

# unique_words = set(input().lower().split())
# print(len(unique_words))

# --- не сдано..
# Подвиг 5. Вводится строка, содержащая латинские символы, пробелы и цифры. 
# Необходимо выделить из нее все неповторяющиеся цифры (символы от 0 до 9) и вывести на экран в одну строку 
# через пробел их в порядке возрастания значений. Если цифры отсутствуют, то вывести слово НЕТ.

# Python 3.9.11 - best language!
# lst = set(filter(lambda x: x.isdigit(),  input()))
# print(" ".join(sorted(lst)) if lst else "НЕТ")


# Подвиг 6. В ночном клубе фиксируется список гостей. Причем гости могут выходить из помещения, 
# а затем, снова заходить. Тогда их имена фиксируются повторно. На вход программы поступает такой список 
# (каждое имя записано с новой строки). Требуется подсчитать общее число гостей, которые посетили ночной клуб. 
# Полагается, что гости имеют уникальные имена. На экран вывести общее число гостей клуба.

# lst_in = ['Мария', 'Елена', 'Екатерина', 'Александр', 'Елена', 'Мария']
# print(len(set(lst_in)))


# Подвиг 7. В аккаунте youtube Сергея прокомментировали очередное видео. Некоторые посетители оставляли несколько 
# комментариев. Требуется по списку комментариев определить уникальное число комментаторов. Комментарии поступают 
# на вход программы в формате:
# имя 1: комментарий 1
# имя 2: комментарий 2

# lst_in = ['EvgeniyK: спасибо большое!', 'LinaTroshka: лайк и подписка!', 'Sergey Karandeev: крутое видео!', 
#           'Евгений Соснин: обожаю', 'EvgeniyK: это повтор?', 'Sergey Karandeev: нет, это новое видео']
# s = set([value.split(": ")[0] for value in lst_in])
# print(s)


# Подвиг 8. Пользователь с клавиатуры вводит названия городов, пока не введет букву q. 
# Определить общее уникальное число городов, которые вводил пользователь. На экран вывести это число. 
# Из коллекций при реализации программы использовать только множества.

# lst_in = set(iter(input, 'q'))
# print(len(lst_in))

# 6.5 Операции над множествами. Сравнение множеств

# Подвиг 1. Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел). 
# Необходимо выбрать и отобразить на экране уникальные числа, присутствующие и в первом и во втором списках одновременно.
# Результат выведите на экран в виде строки чисел, записанных по возрастанию через пробел, 
# используя команду (здесь s - это множество): print(*sorted(s))

# s = set(map(int,  input().split())) & set(map(int, input().split()))
# print(*sorted(s))


# Подвиг 3. Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел). 
# Необходимо выбрать и отобразить на экране уникальные числа, присутствующие в первом или втором списках, 
# но отсутствующие одновременно в обоих. Результат выведите на экран в виде строки чисел, 
# записанных по возрастанию через пробел.

# # s1 = set(map(int,  input().split())) 
# # s2 = set(map(int,  input().split())) 
# s1 = set(map(int,  "1 2 3 4 5".split()))
# s2 = set(map(int,  "4 5 6 7 8".split()))
# s_or = s1|s2 #  в множество попадают содержащиеся или в s1 или в s2 = {1, 2, 3, 4, 5, 6, 7, 8}
# # print(s_or)
# s_and = (s1 & s2) # в множество попадают значения содержащиеся и в s1 и в s2
# print(s_and)
# s_res = s_or - s_and # из множества состоящего из 
# print(*sorted(s_res))


# Подвиг 4. Вводятся два списка городов каждый с новой строки (в строке названия через пробел). 
# Необходимо сравнить их между собой на равенство по уникальным (не повторяющимся) городам. 
# Если списки содержат одни и те же уникальные города, то вывести на экран ДА, иначе - НЕТ.

# Москва Тверь Уфа Казань Уфа Москва
# Уфа Тверь Москва Казань

# # s1 = set(input().split())
# # s2 = set(input().split())
# s1 = set("Москва Тверь Уфа Казань Уфа Москва".split())
# s2 = set("Уфа Тверь Москва Казань".split())

# print("ДА" if s1 == s2 else "НЕТ")
# print(s2)


# Подвиг 5. Вводится список оценок студента - его ответов у доски по предмету "Информатика" в виде чисел 
# от 2 до 5 в одну строку через пробел. Если студент имеет хотя бы одну двойку, то он не допускается до экзамена. 
# Определить на основе введенного списка, допущен ли студент. Если допущен, то вывести слово ДОПУЩЕН, иначе - НЕ ДОПУЩЕН. 
# При реализации задачи используйте множество для определения наличия двойки.
# 3 4 4 5 2 3
# s = set(map(int,  "3 4 4 5 2 3".split())) 
# # print(s)
# print("НЕ ДОПУЩЕН" if 2 in s else "ДОПУЩЕН")


# Подвиг 6. Вводятся два списка городов каждый с новой строки (в строке названия через пробел), 
# которые объехал Сергей в 1-й и 2-й годы своего путешествия по России. Требуется определить, включал ли его маршрут 
# во 2-й год все города 1-го года путешествия? Если это так, то вывести ДА, иначе - НЕТ.

# s1 = set(input().split())
# s2 = set(input().split())
s1 = set("Москва Казань Самара Москва".split())
s2 = set("Москва Владимир Новгород Казань Самара Москва".split())
print("ДА" if s1.issubset(s2) else "НЕТ")

