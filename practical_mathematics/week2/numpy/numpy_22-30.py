# # 22 Нормализация
# # https://stepik.org/lesson/201206/step/2?unit=184486
# import numpy as np
# Z = np.round((Y - np.mean(Y)) / np.std(Y), 2)


# #Переменные A и B содержат по numpy вектору.
# # Найдите их скалярное произведение и сохраните в переменную Z.
# # A и B могут содержать как int, так и float.
# import numpy as np
# A = np.array([1.5, 2.5, 3.5])
# B = np.array([4, 5, 6])
# Z = np.dot(A, B)
# print(Z)


# # 24.2 Умножение матриц
# # Даны 2 матрицы: A и B.
# # Найдите произведение матриц и сохраните его в переменную Z.
# # Если найти произведение матриц невозможно, то запишите в Z строку:
# # Упс! Что-то пошло не так...
# import numpy as np
# try:
#     Z = A @ B
# except ValueError:
#     Z = 'Упс! Что-то пошло не так...'


# 25 Поменяйте знак всех чисел из интервала (3; 9), хранящихся в векторе Z.
# import numpy as np
# Z = np.arange(11)
# np.putmask(Z, (Z > 2) & (Z < 10), Z * (-1))
# print(Z)


# # 29 Вектор A содержит float числа как больше, так и меньше нуля.
# # Округлите их до целых и результат запишите в переменную Z. Округление должно быть "от нуля", т.е.:
# # положительные числа округляем всегда вверх до целого
# # отрицательные числа округляем всегда вниз до целого
# # 0 остаётся 0
# import numpy as np
# A = np.array([-3.1, -5.9, 0, 2.2, 9.8])
# Z = np.where(A > 0, np.ceil(A), np.floor(A))


# # 30 Даны 2 вектора целых чисел A и B.
# # Найдите числа, встречающиеся в обоих векторах и составьте их по возрастанию в вектор Z.
# # Если пересечений нет, то вектор Z будет пустым.
# import numpy as np
# A = np.array([0, 9, 7, 1, 3, 7, 5, 2, 5, 1])
# B = np.array([3, 1, 3, 7, 4, 1, 8, 1, 1, 8])
# Z = np.intersect1d(A, B)


#31
# Suicide mode on
# В Numpy можно предусмотреть различное поведение в случае ошибок (а не только то, что мы наблюдали в задаче 28).
# Для этого используется функция https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.seterr.html
# Отключите вывод всех ошибок (это довольно опасное поведение)
# old_settings = np.seterr(all='ignore')


# # 34 Составьте список (numpy array) дат с шагом в 1 день от начала до окончания отсчёта
# (последний день не включается).
# # Результат должен представлять из себя. список дат в формате ISO.
# # Пример - 2005-02-25, где
# # 1-я входная строка - год (опционально месяц и день) в формате ISO начала отсчёта
# # 2-я входная строка - год (опционально месяц и день) в формате ISO окончания отсчёта
# import numpy as np
# # Z = np.arange(input(), input(), dtype='datetime64[D]')
# print(np.datetime64('today')-1)


# # 37.1
# # На вход подаётся 2 строки:#
# # 1-я строка содержит 2 натуральных числа: n, m
# # 2-я строка содержит число k
# # Создайте, матрицу размера n*m такую, что каждая её строка содержит числа от k до k+m-1 (с шагом 1).
# import numpy as np
# n, m = map(int, input().split())
# k = int(input())
# Z = np.tile(np.arange(k, k + m, dtype=np.float), (n, 1))
# print(Z)

#
# # 37.2 На вход подаётся 2 строки:#
# # 1-я строка содержит 2 натуральных числа: n, m
# # 2-я строка содержит число k
# # Создайте, матрицу размера n*m такую, что каждый её столбец содержит числа от k до k+n-1 (с шагом 1).
# # Ответ запишите в переменную Z
# import numpy as np
# n, m = map(int, input().split())
# k = float(input())
# Z = np.tile(np.arange(k, k + n), (m, 1)).T


# # 38  Переменная V содержит итерируемый объект.
# # Превратите его в одномерный numpy массив и сохраните в переменную Z. Массив будет содержать только числа типа float.
# import numpy as np
# V = range(10)
# Z = np.fromiter(V, float)
# print(Z)

# для продолжения
# https://github.com/Xelerezex/learning-space/tree/3d7ff912088c9e602f2becd4522b8b97e7f9c109/stepik-courses/stepik-practice-python-math/05-week-2-vectors-%26-matrix/6.06-numpy-31-34_37-40

