

# get_sq = lambda value: value * value

# print(get_sq(2))


# Подвиг 3. Объявите анонимную (лямбда) функцию с двумя параметрами для деления одного целого числа на другое.
# Если происходит деление на ноль, то функция должна возвращать значение None, иначе - результат деления.
# Присвойте эту функцию переменной get_div. Вызывать функцию не нужно, только задать.

# get_div = lambda val1, val2: val1 / val2 if val2 else None

# print(get_div(10, 5))


# Подвиг 4. Объявите анонимную (лямбда) функцию для вычисления модуля числа 
# (то есть, отрицательные числа нужно делать положительными). Вызовите эту функцию для введенного числа x: 
# x = float(input())
# Отобразите результат работы функции на экране.

# mod_value = lambda x : -1 * x if x < 0 else x
# print(mod_value(float(input())))


# Подвиг 5. Объявите анонимную (лямбда) функцию для определения вхождения в переданную ей строку фрагмента "ra". 
# То есть, функция должна возвращать True, если такой фрагмент присутствует в строке и False - в противном случае.
# s = input()
# check_str = lambda val: val
# print(check_str(s))


# Подвиг 6. В программе задана функция filter_lst (см. программу ниже), которая отбирает элементы, 
# переданного ей итерируемого объекта и возвращает сформированный кортеж значений.
# На вход программы поступает список целых чисел, записанных в одну строчку через пробел. 
# Вызовите функцию filter_lst для формирования:
# - кортежа из всех значений входного списка (передается в параметр it); = 5 4 -3 4 5 -24 -6 9 0
# - кортежа только из отрицательных чисел; = -3 -24 -6
# - кортежа только из неотрицательных чисел (то есть, включая и 0); = 5 4 4 5 9 0
# - кортежа из чисел в диапазоне [3; 5] = 5 4 4 5
# ввод: 5 4 -3 4 5 -24 -6 9 0
# Каждый результат работы функции следует отображать с новой строки командой: print(*lst)


def filter_lst(it, key=None):
    if key is None:
        return tuple(it)

    res = ()
    for x in it:
        if key(x):
            res += (x,)

    return res

in_lst = [int(value) for value in input().split()]
print(*filter_lst(in_lst))
print(*filter_lst(in_lst, key=lambda val: val < 0))
print(*filter_lst(in_lst, key=lambda val: val >= 0))
print(*filter_lst(in_lst, key=lambda val: 2 < val < 6 ))
